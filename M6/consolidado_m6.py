# -*- coding: utf-8 -*-
"""Consolidado M6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SYFYDdQFZdj4kJ6F7XcGRdw7aMteLg91
"""

from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import (
    mean_absolute_error, mean_squared_error, r2_score,
    accuracy_score, precision_score, recall_score, f1_score,
    roc_curve, auc
)
from sklearn.preprocessing import label_binarize


ruta_csv = '/content/drive/MyDrive/PorfolioBASEDATOS/M6/cambio_climatico_agricultura.csv'
df = pd.read_csv(ruta_csv)

print("Primeras filas:\n", df.head())
print("\nDimensiones:", df.shape)
print("\nInformación general:\n")
print(df.info())
print("\nValores nulos:\n", df.isnull().sum())


df_encoded = pd.get_dummies(df, columns=["País"], drop_first=True)


X = df_encoded.drop("Producción_alimentos", axis=1)
y = df_encoded["Producción_alimentos"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

scaler = StandardScaler()
X_train_s = scaler.fit_transform(X_train)
X_test_s = scaler.transform(X_test)


reg_lineal = LinearRegression()
reg_lineal.fit(X_train_s, y_train)
y_pred_lin = reg_lineal.predict(X_test_s)

print("\n--- Regresión Lineal ---")
print("MAE:", mean_absolute_error(y_test, y_pred_lin))
print("MSE:", mean_squared_error(y_test, y_pred_lin))
print("R²:", r2_score(y_test, y_pred_lin))


poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_poly = poly.fit_transform(X_train_s)
X_test_poly = poly.transform(X_test_s)

reg_poly = LinearRegression()
reg_poly.fit(X_train_poly, y_train)
y_pred_poly = reg_poly.predict(X_test_poly)

print("\n--- Regresión Polinómica ---")
print("MAE:", mean_absolute_error(y_test, y_pred_poly))
print("MSE:", mean_squared_error(y_test, y_pred_poly))
print("R²:", r2_score(y_test, y_pred_poly))


tree_reg = DecisionTreeRegressor(max_depth=5, random_state=42)
tree_reg.fit(X_train, y_train)
y_pred_tree = tree_reg.predict(X_test)

print("\n--- Árbol de Decisión ---")
print("MAE:", mean_absolute_error(y_test, y_pred_tree))
print("MSE:", mean_squared_error(y_test, y_pred_tree))
print("R²:", r2_score(y_test, y_pred_tree))


forest_reg = RandomForestRegressor(n_estimators=200, max_depth=6, random_state=42)
forest_reg.fit(X_train, y_train)
y_pred_rf = forest_reg.predict(X_test)

print("\n--- Random Forest ---")
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("MSE:", mean_squared_error(y_test, y_pred_rf))
print("R²:", r2_score(y_test, y_pred_rf))


df_clf = df.copy()
q1 = df_clf["Producción_alimentos"].quantile(0.25)
q3 = df_clf["Producción_alimentos"].quantile(0.75)

impacto = []
for v in df_clf["Producción_alimentos"]:
    if v <= q1:
        impacto.append("Bajo")
    elif v >= q3:
        impacto.append("Alto")
    else:
        impacto.append("Medio")

df_clf["Impacto"] = impacto

df_clf_enc = pd.get_dummies(df_clf, columns=["País"], drop_first=True)
Xc = df_clf_enc.drop(["Producción_alimentos", "Impacto"], axis=1)
yc = df_clf_enc["Impacto"]

Xc_train, Xc_test, yc_train, yc_test = train_test_split(
    Xc, yc, test_size=0.2, random_state=42, stratify=yc
)

Xc_train_s = scaler.fit_transform(Xc_train)
Xc_test_s = scaler.transform(Xc_test)


clas_knn = KNeighborsClassifier(n_neighbors=5)
clas_knn.fit(Xc_train_s, yc_train)
yp_knn = clas_knn.predict(Xc_test_s)

clas_tree = DecisionTreeClassifier(random_state=42)
clas_tree.fit(Xc_train, yc_train)
yp_tree = clas_tree.predict(Xc_test)

clas_svm = SVC(probability=True, random_state=42)
clas_svm.fit(Xc_train_s, yc_train)
yp_svm = clas_svm.predict(Xc_test_s)


def eval_modelo(nombre, y_true, y_pred):
    print(f"\n--- {nombre} ---")
    print("Accuracy:", accuracy_score(y_true, y_pred))
    print("Precisión:", precision_score(y_true, y_pred, average="weighted"))
    print("Recall:", recall_score(y_true, y_pred, average="weighted"))
    print("F1:", f1_score(y_true, y_pred, average="weighted"))

eval_modelo("KNN", yc_test, yp_knn)
eval_modelo("Árbol de decisión", yc_test, yp_tree)
eval_modelo("SVM", yc_test, yp_svm)


yc_test_bin = label_binarize(yc_test, classes=["Bajo", "Medio", "Alto"])
y_prob_svm = clas_svm.predict_proba(Xc_test_s)

for i, clase in enumerate(["Bajo", "Medio", "Alto"]):
    fpr, tpr, _ = roc_curve(yc_test_bin[:, i], y_prob_svm[:, i])
    roc_auc = auc(fpr, tpr)
    plt.figure()
    plt.plot(fpr, tpr, label=f"{clase} (AUC={roc_auc:.2f})")
    plt.plot([0,1],[0,1],'k--')
    plt.xlabel("Falsos positivos")
    plt.ylabel("Verdaderos positivos")
    plt.title(f"Curva ROC - Clase {clase}")
    plt.legend()
    plt.show()