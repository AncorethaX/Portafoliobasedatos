# -*- coding: utf-8 -*-
"""Consolidado m8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_QZyMQLU93gIBm_cJdY7_2jSgC2hy92
"""

from google.colab import drive
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, regularizers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

drive.mount('/content/drive')

path = "/content/drive/MyDrive/PorfolioBASEDATOS/M8/dataset_natalidad.csv"
df = pd.read_csv(path)

df.columns = df.columns.str.strip().str.replace(" ", "_").str.replace("Ã", "A")
df = df.rename(columns={"Tasa_Natalidad": "Tasa_natalidad"})

categorical_cols = df.select_dtypes(include=["object"]).columns
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

y = df_encoded["Tasa_natalidad"]
X = df_encoded.drop("Tasa_natalidad", axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

def crear_modelo(activation="relu", optimizer="adam", lr=0.001, dropout_rate=0.2):
    model = keras.Sequential([
        layers.Input(shape=(X_train.shape[1],)),
        layers.Dense(64, activation=activation, kernel_regularizer=regularizers.l2(0.01)),
        layers.Dropout(dropout_rate),
        layers.Dense(32, activation=activation, kernel_regularizer=regularizers.l2(0.01)),
        layers.Dense(1, activation="linear")
    ])
    if optimizer == "adam":
        opt = keras.optimizers.Adam(learning_rate=lr)
    elif optimizer == "sgd":
        opt = keras.optimizers.SGD(learning_rate=lr, momentum=0.9)
    else:
        opt = keras.optimizers.RMSprop(learning_rate=lr)
    model.compile(optimizer=opt, loss="mse", metrics=["mae"])
    return model

model = crear_modelo()
history = model.fit(X_train, y_train, validation_split=0.2, epochs=100, batch_size=16, verbose=1)

plt.figure(figsize=(8,5))
plt.plot(history.history["mae"], label="Entrenamiento")
plt.plot(history.history["val_mae"], label="Validación")
plt.xlabel("Épocas")
plt.ylabel("MAE")
plt.legend()
plt.show()

loss, mae = model.evaluate(X_test, y_test, verbose=0)
print(f"MAE en test: {mae:.2f}")

y_pred = model.predict(X_test)
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], "r--")
plt.xlabel("Real")
plt.ylabel("Predicho")
plt.show()

importances = np.abs(model.layers[0].get_weights()[0]).mean(axis=1)
importance_df = pd.DataFrame({"Variable": X.columns, "Importancia": importances}).sort_values(by="Importancia", ascending=False)
sns.barplot(x="Importancia", y="Variable", data=importance_df)
plt.show()