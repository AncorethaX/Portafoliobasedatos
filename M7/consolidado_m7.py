# -*- coding: utf-8 -*-
"""Consolidado m7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MF8PgRlbu2GqQYOukN2JnFhAHQoTcjtw
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from scipy.cluster.hierarchy import dendrogram, linkage

from google.colab import drive
drive.mount('/content/drive')

ruta = "/content/drive/MyDrive/PorfolioBASEDATOS/M7/dataset_generos_musicales.csv"
df = pd.read_csv(ruta)

print("Primeras filas del dataset:")
print(df.head())
print("\nInformación general:")
print(df.info())
print("\nEstadísticas descriptivas:")
print(df.describe())


plt.figure(figsize=(12,6))
sns.heatmap(df.set_index("País"), cmap="viridis", annot=True)
plt.title("Popularidad de géneros musicales por país")
plt.show()


X = df.drop("País", axis=1)

# K-MEANS
inertia = []
silhouette_scores = []
K = range(2, 8)

for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X, kmeans.labels_))

# Método del codo
plt.plot(K, inertia, 'o-')
plt.xlabel("Número de clusters K")
plt.ylabel("Inercia")
plt.title("Método del codo")
plt.show()

# Silhouette
plt.plot(K, silhouette_scores, 'o-')
plt.xlabel("Número de clusters K")
plt.ylabel("Coeficiente Silhouette")
plt.title("Silhouette vs K")
plt.show()

# KMeans final con K=3
kmeans = KMeans(n_clusters=3, random_state=42)
df["Cluster_KMeans"] = kmeans.fit_predict(X)
print("\nClusters con K-Means:")
print(df[["País","Cluster_KMeans"]])

# CLUSTERING JERÁRQUICO
linked = linkage(X, method='ward')
plt.figure(figsize=(10,5))
dendrogram(linked, labels=df["País"].values, orientation="top")
plt.title("Dendrograma (Ward)")
plt.show()

hc = AgglomerativeClustering(n_clusters=3, linkage="ward")
df["Cluster_HC"] = hc.fit_predict(X)
print("\nClusters con Clustering Jerárquico:")
print(df[["País","Cluster_HC"]])

# DBSCAN
print("\nPruebas con DBSCAN:")
for eps in [0.5, 1.0, 1.5]:
    dbscan = DBSCAN(eps=eps, min_samples=2)
    labels = dbscan.fit_predict(X)
    print(f"EPS={eps} → Clusters encontrados: {len(set(labels))}")
    print(dict(zip(df["País"], labels)))

df["Cluster_DBSCAN"] = DBSCAN(eps=1.0, min_samples=2).fit_predict(X)


# PCA
pca = PCA().fit(X)
explained = pca.explained_variance_ratio_.cumsum()
plt.plot(range(1, len(explained)+1), explained, marker="o")
plt.axhline(0.9, color="red", linestyle="--")
plt.title("Varianza explicada acumulada (PCA)")
plt.xlabel("N° Componentes")
plt.ylabel("Varianza acumulada")
plt.show()


pca_2 = PCA(n_components=2)
X_pca = pca_2.fit_transform(X)
plt.scatter(X_pca[:,0], X_pca[:,1], c=df["Cluster_KMeans"], cmap="tab10")
for i, country in enumerate(df["País"]):
    plt.text(X_pca[i,0]+0.02, X_pca[i,1], country)
plt.title("PCA (2 componentes principales)")
plt.show()

# t-SNE
tsne = TSNE(n_components=2, perplexity=5, random_state=42)
X_tsne = tsne.fit_transform(X)

plt.scatter(X_tsne[:,0], X_tsne[:,1], c=df["Cluster_KMeans"], cmap="tab10")
for i, country in enumerate(df["País"]):
    plt.text(X_tsne[i,0]+0.02, X_tsne[i,1], country)
plt.title("t-SNE (perplexity=5)")
plt.show()